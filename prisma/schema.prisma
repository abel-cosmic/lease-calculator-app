generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
    // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
    id                String  @id @default(cuid())
    adminId           String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    adminId      String   @map("admin_id")
    expires      DateTime
    user         Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Admin {
    id        String    @id @default(cuid())
    firstName String
    lastName  String
    email     String    @unique
    password  String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    users     User[]
    accounts  Account[]
    sessions  Session[]

    @@map("admins")
}

model User {
    id           String        @id @default(cuid())
    firstName    String
    lastName     String
    email        String        @unique
    phone        String
    createdAt    DateTime      @default(now()) @map("created_at")
    updatedAt    DateTime      @updatedAt @map("updated_at")
    adminId      String?
    admin        Admin?        @relation(fields: [adminId], references: [id])
    manageLeases ManageLease[]
}

model Lease {
    id                String        @id @default(cuid())
    leaseStartDate    String
    leaseEndDate      String
    monthlyRentAmount String
    securityDeposit   String
    additionalCharges String
    createdAt         DateTime      @default(now()) @map("created_at")
    updatedAt         DateTime      @updatedAt @map("updated_at")
    manageLeases      ManageLease[]
}

model ManageLease {
    id             String   @id @default(cuid())
    userId         String
    leaseId        String
    assignmentDate DateTime
    status         String   @default("active")
    user           User     @relation(fields: [userId], references: [id])
    lease          Lease    @relation(fields: [leaseId], references: [id])
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    @@unique([userId, leaseId])
}
